What is Index?

Indexing is very important to 
High Performance in SQL Server.
Indexes speed up the Querying 
process by providing quick access
to rows in a table. It is similar
to the way a book index helps you 
find information quickly.

There are many different types of
Indexes but I have worked mainly
with Clustered and Non Clustered 
Indexes which are similar to a book. 

The Page-numbers represents the 
Clustered Index and the Book Index
at the back of the book represents
the Non-Clustered Index.

Indexes in SQL Server provides a 
shortcut to finding data quickly 
instead of having to scan the 
entire table (table scan). 

Putting a Primary Key Contraint 
on a table column automatically 
creates a Clustered Index. But, 
before creating Indexes, it is 
advisable to look at the usage
pattern of the data within the 
table. Establish how users are 
going to want to extract the 
data, to filter it. This 
ensures that Indexes are 
created to help performance.

Most of the time Clustered 
Indexes are the Primary Keys
and it automatically sorts the 
data when it is created. 

Only 1 Clustered Index is 
allowed per table. No extra 
storage is needed because the 
data and Index are stored in the 
same place. 

Clustered Indexes can be created 
automatically and manually. 
It is faster to read than 
Non-Clustered Indexes because as 
with a book, the pagenumber of the 
book is found with the data so no 
additional pages are needed, 
compared to the Non-Clustered 
Index and book index which 
requires additional pages. 

In a recent project I worked on
the requirement was enable 
searches on specific Customers 
using a SELECT statement on the 
CustomerID column that had the 
Clustered Index. 

In the background, the Clustered
Index enabled SQL Server to go 
directly to that CustomerID to 
retrieve the row because the 
CustomerID Index was in the same 
row as the data for that Customer, 
similar to the book page-number 
being on the same page as the 
rest of the data. 

Except when creating a Unique 
Key Constraint on a table column, 
Non-Clustered Indexes are created 
manually. 

A Non-Clustered Index 
is not sorted but it leaves a 
hint/pointer to where to find the 
address of the next record. There 
can be more than one Non-
Clustered  Index per table. 

The Non-Clustered Index requires
extra storage space because the
data and the Index are not stored
in the same place. Like the book 
analogy, the index and data are 
in different places 
(at the back of the book) - 
so when you update the data 
you need to update the Index 
as well.

During a recent project, I used
used Non-Clustered Indexes on
columns where the values 
were constantly changing, 
requiring regular Updates or 
Inserts. This way SQL Server 
only has to update the pointers 
that reference the data, but it 
can put the actual data wherever 
there is available space on disk. 

This makes Updates while using a 
Non-Clustered Index faster 
than when using a Clustered Index 
because in a Clustered Index the 
data has to be rearranged in the 
correct order as well, potentially 
resulting in a myriad of 
operations to shift the data around.

So in Summary, Indexes are essential 
to performance enhancement but a good
aessement of the effect of any Index 
must be taken, when choosing the type 
of Index needed for the business need.










