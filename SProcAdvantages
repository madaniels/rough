What are the advantages of using Stored Procedures?

A stored procedure in SQL Server is a group of one 
or more Transact-SQL statements. SP accept input 
parameters and return multiple values in the form 
of output parameters to the calling program. They 
call other procedures and return a status value to 
a calling program to indicate success or failure 
(and the reason for failure).

Benefits of Using Stored Procedures

Reduced server/client network traffic
The commands in a procedure are executed as a 
single batch of code. This can significantly 
reduce network traffic between the server and 
client because only the call to execute the 
procedure is sent across the network. Without 
the code encapsulation provided by a procedure, 
every individual line of code would have to 
cross the network.

Stronger security
Multiple users and client programs can perform 
operations on underlying database objects 
through a procedure, even if the users and 
programs do not have direct permissions on 
those underlying objects. The procedure controls 
what processes and activities are performed and 
protects the underlying database objects. This 
eliminates the requirement to grant permissions 
at the individual object level and simplifies 
the security layers.

The EXECUTE AS clause can be specified in the 
CREATE PROCEDURE statement to enable 
impersonating another user, or enable users or 
applications to perform certain database 
activities without needing direct permissions 
on the underlying objects and commands. 

For example, some actions such as TRUNCATE TABLE, 
do not have grantable permissions. To execute 
TRUNCATE TABLE, the user must have ALTER 
permissions on the specified table. Granting a 
user ALTER permissions on a table may not be 
ideal because the user will effectively have 
permissions well beyond the ability to truncate 
a table. By incorporating the TRUNCATE TABLE 
statement in a module and specifying that module 
execute as a user who has permissions to modify 
the table, you can extend the permissions to 
truncate the table to the user that you grant 
EXECUTE permissions on the module.

When calling a procedure over the network, only 
the call to execute the procedure is visible. 
Therefore, malicious users cannot see table and 
database object names, embed Transact-SQL 
statements of their own, or search for critical 
data.

Using procedure parameters helps guard against 
SQL injection attacks. Since parameter input is 
treated as a literal value and not as executable 
code, it is more difficult for an attacker to 
insert a command into the Transact-SQL 
statement(s) inside the procedure and compromise 
security.

Reuse of code
The code for any repetitious database operation 
is the perfect candidate for encapsulation in 
procedures. This eliminates needless rewrites 
of the same code, decreases code inconsistency, 
and allows the code to be accessed and executed 
by any user or application possessing the 
necessary permissions.

Easier maintenance
When client applications call procedures and 
keep database operations in the data tier, only 
the procedures must be updated for any changes 
in the underlying database. The application tier 
remains separate and does not have to know how 
about any changes to database layouts, 
relationships, or processes.

Improved performance
By default, a procedure compiles the first time 
it is executed and creates an execution plan 
that is reused for subsequent executions. Since 
the query processor does not have to create a 
new plan, it typically takes less time to 
process the procedure.

If there has been significant change to the 
tables or data referenced by the procedure, 
the precompiled plan may actually cause the 
procedure to perform slower. In this case, 
recompiling the procedure and forcing a new 
execution plan can improve performance.

Types of Stored Procedures
User-defined
Temporary
System
Extended User-Defined

In a previous project I worked on


